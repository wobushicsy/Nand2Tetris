<identifier> class </identifier>
<identifier> Main </identifier>
<identifier> { </identifier>
<identifier> function </identifier>
<identifier> void </identifier>
<identifier> main </identifier>
<identifier> ( </identifier>
<identifier> ) </identifier>
<identifier> { </identifier>
<identifier> var </identifier>
<identifier> Array </identifier>
<identifier> a </identifier>
<identifier> ; </identifier>
<identifier> var </identifier>
<identifier> int </identifier>
<identifier> length </identifier>
<identifier> ; </identifier>
<identifier> var </identifier>
<identifier> int </identifier>
<identifier> i </identifier>
<identifier> , </identifier>
<identifier> sum </identifier>
<identifier> ; </identifier>
<identifier> let </identifier>
<identifier> length </identifier>
<identifier> = </identifier>
<identifier> Keyboard </identifier>
<identifier> . </identifier>
<identifier> readInt </identifier>
<identifier> ( </identifier>
<StringConstant> "HOW MANY NUMBERS? " </StringConstant>
<identifier> ) </identifier>
<identifier> ; </identifier>
<identifier> let </identifier>
<identifier> a </identifier>
<identifier> = </identifier>
<identifier> Array </identifier>
<identifier> . </identifier>
<identifier> new </identifier>
<identifier> ( </identifier>
<identifier> length </identifier>
<identifier> ) </identifier>
<identifier> ; </identifier>
<identifier> let </identifier>
<identifier> i </identifier>
<identifier> = </identifier>
<identifier> 0 </identifier>
<identifier> ; </identifier>
<identifier> while </identifier>
<identifier> ( </identifier>
<identifier> i </identifier>
<identifier> < </identifier>
<identifier> length </identifier>
<identifier> ) </identifier>
<identifier> { </identifier>
<identifier> let </identifier>
<identifier> a </identifier>
<identifier> [ </identifier>
<identifier> i </identifier>
<identifier> ] </identifier>
<identifier> = </identifier>
<identifier> Keyboard </identifier>
<identifier> . </identifier>
<identifier> readInt </identifier>
<identifier> ( </identifier>
<StringConstant> "ENTER THE NEXT NUMBER: " </StringConstant>
<identifier> ) </identifier>
<identifier> ; </identifier>
<identifier> let </identifier>
<identifier> i </identifier>
<identifier> = </identifier>
<identifier> i </identifier>
<identifier> + </identifier>
<identifier> 1 </identifier>
<identifier> ; </identifier>
<identifier> } </identifier>
<identifier> let </identifier>
<identifier> i </identifier>
<identifier> = </identifier>
<identifier> 0 </identifier>
<identifier> ; </identifier>
<identifier> let </identifier>
<identifier> sum </identifier>
<identifier> = </identifier>
<identifier> 0 </identifier>
<identifier> ; </identifier>
<identifier> while </identifier>
<identifier> ( </identifier>
<identifier> i </identifier>
<identifier> < </identifier>
<identifier> length </identifier>
<identifier> ) </identifier>
<identifier> { </identifier>
<identifier> let </identifier>
<identifier> sum </identifier>
<identifier> = </identifier>
<identifier> sum </identifier>
<identifier> + </identifier>
<identifier> a </identifier>
<identifier> [ </identifier>
<identifier> i </identifier>
<identifier> ] </identifier>
<identifier> ; </identifier>
<identifier> let </identifier>
<identifier> i </identifier>
<identifier> = </identifier>
<identifier> i </identifier>
<identifier> + </identifier>
<identifier> 1 </identifier>
<identifier> ; </identifier>
<identifier> } </identifier>
<identifier> do </identifier>
<identifier> Output </identifier>
<identifier> . </identifier>
<identifier> printString </identifier>
<identifier> ( </identifier>
<StringConstant> "THE AVERAGE IS: " </StringConstant>
<identifier> ) </identifier>
<identifier> ; </identifier>
<identifier> do </identifier>
<identifier> Output </identifier>
<identifier> . </identifier>
<identifier> printInt </identifier>
<identifier> ( </identifier>
<identifier> sum </identifier>
<identifier> / </identifier>
<identifier> length </identifier>
<identifier> ) </identifier>
<identifier> ; </identifier>
<identifier> do </identifier>
<identifier> Output </identifier>
<identifier> . </identifier>
<identifier> println </identifier>
<identifier> ( </identifier>
<identifier> ) </identifier>
<identifier> ; </identifier>
<identifier> return </identifier>
<identifier> ; </identifier>
<identifier> } </identifier>
<identifier> } </identifier>
